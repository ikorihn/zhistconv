package zhistconv

import (
	"reflect"
	"testing"
)

func TestParseZshHistory(t *testing.T) {
	input := []byte{
		0xE3, 0x81, 0x81,
		0xE3, 0x81, 0x82,
		0xE3, 0x81, 0x83, 0xA3,
		0xE3, 0x81, 0x83, 0xA4,
		0xE3, 0x81, 0x83, 0xA5,
		0xE3, 0x81, 0x83, 0xA6,
		0xE3, 0x81, 0x83, 0xBC,
		0xE3, 0x81, 0x83, 0xBD,
		0xE3, 0x81, 0x83, 0xBE,
		0xE3, 0x81, 0x83, 0xBF,
		0xE3, 0x81, 0x83, 0x80,
		0xE3, 0x81, 0x83, 0x81,
		0xE3, 0x81, 0x83, 0x82,
		0xE3, 0x81, 0xA3,
		0xE3, 0x81, 0xA4,
		0xE3, 0x81, 0xA5,
	}

	actual := ParseZshHistory(input)
	expected := []byte("ぁあぃいぅうぜそぞただちぢっつづ")

	if !reflect.DeepEqual(expected, actual) {
		t.Errorf("want: %v, got: %v", expected, actual)
	}

}
func TestConvertToZshHistory(t *testing.T) {
	input := []byte("ぁあぃいぅうぜそぞただちぢっつづ")

	actual := ConvertToZshHistory(input)
	expected := []byte{
		0xE3, 0x81, 0x81,
		0xE3, 0x81, 0x82,
		0xE3, 0x81, 0x83, 0xA3,
		0xE3, 0x81, 0x83, 0xA4,
		0xE3, 0x81, 0x83, 0xA5,
		0xE3, 0x81, 0x83, 0xA6,
		0xE3, 0x81, 0x83, 0xBC,
		0xE3, 0x81, 0x83, 0xBD,
		0xE3, 0x81, 0x83, 0xBE,
		0xE3, 0x81, 0x83, 0xBF,
		0xE3, 0x81, 0x83, 0x80,
		0xE3, 0x81, 0x83, 0x81,
		0xE3, 0x81, 0x83, 0x82,
		0xE3, 0x81, 0xA3,
		0xE3, 0x81, 0xA4,
		0xE3, 0x81, 0xA5,
	}

	if !reflect.DeepEqual(expected, actual) {
		t.Errorf("want: %v, got: %v", expected, actual)
	}

}
